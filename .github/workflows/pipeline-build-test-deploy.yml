name: Dual Job Date Build Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build:ci

      - name: Archive application
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Convert to lowercase
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME@L}" >> "${GITHUB_ENV}"
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-develop

  notify_failure:
    name: Notify on Build, Test or Dockerization Failure
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: failure()
    steps:
      - name: Get Committer Username
        id: commit_info
        run: echo "::set-output name=COMMITTER::$(git log -1 --pretty=format:'%an')"
      - name: Send Discord Notification on Failure
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WORKFLOW: ${{ github.workflow }}
          BRANCH: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          SERVER_URL: ${{ github.server_url }}
          AUTHOR: ${{ github.event.head_commit.author.name }}
        run: |
          set -e
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"❌❌ **Workflow Failed:** $WORKFLOW\n**Branch:** $BRANCH\n**Repository:** $REPOSITORY\n**Link:** $SERVER_URL/$REPOSITORY/actions/runs/$RUN_ID\n**Committer:** @$AUTHOR\"}" \
          $WEBHOOK_URL || exit 1

  notify_success:
    name: Notify on Build, Test or Dockerization Success
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: success()
    steps:
      - name: Get Committer Username
        id: commit_info
        run: echo "::set-output name=COMMITTER::$(git log -1 --pretty=format:'%an')"
      
      - name: Send Discord Notification on Success
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WORKFLOW: ${{ github.workflow }}
          BRANCH: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          SERVER_URL: ${{ github.server_url }}
          AUTHOR: ${{ github.event.head_commit.author.name }}
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"✅ **Workflow succeeded:** $WORKFLOW\n**Branch:** $BRANCH\n**Repository:** $REPOSITORY\n**Link:** $SERVER_URL/$REPOSITORY/actions/runs/$RUN_ID\n**Committer:** $AUTHOR\"}" \
          $WEBHOOK_URL